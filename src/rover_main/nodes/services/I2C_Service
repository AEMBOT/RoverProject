#!/usr/bin/python3

import rospy

from rover_main.srv import i2c_comms, i2c_commsResponse

from communication.I2C.General_I2C_Communication import I2C
from communication.I2C.Adafruit_PWM_Driver import AdafruitDriver

PWM_Driver: AdafruitDriver = None

def on_service_contact(requested_data):
    """
    When I2C Data is requested
    
    Command Codes:
        ar = Analog Read
        dr = Digital Read

    """
    rospy.loginfo_once("Recieived Request...")

    # Check if the command indcludes ada_pwm if it doesnt then send normal I2C data
    if not "ada_pwm" in requested_data.data.strip():
        rospy.loginfo_once("Sending data to general I2C bus...")
        try:
            response_data = I2C.send_data(addr=requested_data.addr,
                                        data=requested_data.data)
            return response_data

        except Exception as e:
            print("Error: %s"%e)

            return i2c_commsResponse(str(e))
        
    # Represent response_received controller
    elif "ada_pwm" in requested_data.data.strip():
        rospy.loginfo_once(requested_data.data.strip())

        # Interact with the PWM board
        return PWM_Driver.interact(requested_data.data.strip())

        
    

def start_service():
    """Create new service to proccess data that needs to be sent over the I2C Bus"""

    # Create a new node
    rospy.init_node("i2c_service")

    # Create new global PWM Driver instance
    global PWM_Driver
    PWM_Driver = AdafruitDriver()

    # Create new service to handle I2C data requests
    i2c_service = rospy.Service(name="i2c_service", 
                                service_class=i2c_comms,
                                handler=on_service_contact)

    # Log the I2C Service is up and waiting
    rospy.loginfo_once("I2C Service Awaiting Input...")

    # Prevent python from exiting
    rospy.spin()

if __name__ == "__main__":
    start_service()
