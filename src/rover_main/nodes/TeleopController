#!/usr/bin/python3
"""Used to command the rover's drive train based on controller input"""

import rospy


from rover_main.msg import controllerMap
from rover_main.srv import DriveTrainService


from math import pow
from time import sleep
import threading

CONTROLLER_STATE = None

# Global controller deadzone
CONTROLLER_DEADZONE = 0.05

def create_controller_deadzone(input):
    """Create a slight deadzone so that you can easily stop the motors (A standard foreach loop wasn't working here)"""

    if(abs(input) < CONTROLLER_DEADZONE):
        input = 0
    
    return input

def control_topic_update(callback_data):
    global CONTROLLER_STATE
    
    # Set the data from the controller_state topic equal to a global variable that is accessed from controlling thread
    CONTROLLER_STATE = callback_data

def create_node():
    """Starts the node and subscribes the required data topics"""

    # Create a new network communication node
    rospy.init_node("TeleopControllerNode")

    # Subscribe to the controller topic to get information from
    rospy.Subscriber(name="controller_state",
                     data_class=controllerMap,
                     callback=control_topic_update,
                     queue_size=1000)
    rospy.loginfo(f"{rospy.get_name()} Started...")

    # Register subscriber events
    rospy.spin()

def control_thread():
    # Get the global version of controller state
    global CONTROLLER_STATE

    # Block until the I2C service is ready and then connect so that data can be sent and received
    rospy.wait_for_service("drive_train_controller")
    drive_train_controller = rospy.ServiceProxy("drive_train_controller", service_class=DriveTrainService, persistent=True)

    # Wait for the controller values to populate and make sure that ros is still running
    while CONTROLLER_STATE == None and not rospy.is_shutdown():
        pass

    # Simple test to run both motors 
    while not rospy.is_shutdown():

        # Left Y is the forward/backward movement
        left_y = float(CONTROLLER_STATE.Joystick_LeftY)

        # Right X is the steering control
        right_x = float(CONTROLLER_STATE.Joystick_RightX)

        # Scale the input values to allow for minor adjustments to be made as to not break anything
        left_y = convert_to_cubic(left_y)
        right_x = convert_to_cubic(right_x)

        # Attempt to contact the service with the data
        try:
            rospy.loginfo(drive_train_controller(motor_speeds=create_controller_deadzone(left_y), wheel_angles=create_controller_deadzone(right_x)))
        except rospy.ServiceException as e:
            rospy.logfatal_once(f"Service Exception Occurred: {e}")

def convert_to_cubic(value):
    """Converts the joystick inputs to a cubic function to scale the values to start slow while still ending at 1"""
    return pow(value, 3)

if __name__ == "__main__":
    # Thread to handle actions taken based on controller input
    controller_thread = threading.Thread(target=control_thread)
    controller_thread.start()

    create_node()

    

