#!/usr/bin/python3
"""Used to command the rover's drive train based on controller input"""

import rospy
from smbus2 import SMBus

from rover_main.msg import controllerMap

from time import sleep
import threading

CONTROLLER_STATE = None

def control_topic_update(callback_data):
    global CONTROLLER_STATE
    # print(callback_data)
    CONTROLLER_STATE = callback_data

def create_node():
    """Starts the node and subscribes the required data topics"""

    # Create a new network communication node
    rospy.init_node("rover_network_comms", anonymous=True)

    # Subscribe to the controller topic to get information from
    rospy.Subscriber(name="controller_state",
                     data_class=controllerMap,
                     callback=control_topic_update,
                     queue_size=1000)
    rospy.loginfo("Started Node...")

    # Register subscriber events
    rospy.spin()

def control_thread():
    global CONTROLLER_STATE
    # Get the global version of controller state

    # Get the first I2C bus on the rpi
    I2Cbus = SMBus(1)

    motor_control_arduino_addr = 0x08

    # Arrays to hold individual motor values
    motor_speeds = [64, 64, 64, 64, 64, 64]
    last_motor_speed = [64, 64, 64, 64, 64, 64]

    # Wait for the controller values to populate and make sure that ros is still running
    while CONTROLLER_STATE == None and not rospy.is_shutdown():
        pass

    # Simple test to run both motors 
    while not rospy.is_shutdown():
        left_y = float(CONTROLLER_STATE.Joystick_LeftY)
        right_y = float(CONTROLLER_STATE.Joystick_RightY)

        # Convert to 0 - 127 range with 64 at 0
        left_y = int(unit_range_to_controller(left_y))
        right_y = int(unit_range_to_controller(right_y))

        # Set the values in the motor_speed array to the controller inputs
        motor_speeds[0] = left_y
        motor_speeds[1] = right_y

        # Create a slight deadzone so that you can easily stop the motors
        for i in range(len(motor_speeds)):
            if(motor_speeds[i] <  70 and motor_speeds[i] > 58):
                motor_speeds[i] = 64

        if motor_speeds != last_motor_speed:
            print(motor_speeds)
            try:
                I2Cbus.write_i2c_block_data(motor_control_arduino_addr, 0x00, bytes(motor_speeds))
            except:
                rospy.logerr("I2C Exception Occurred")

        # Copy the previous loops motor_speeds to the last
        last_motor_speed = motor_speeds.copy()
def unit_range_to_controller(value):
    """Convert from 0 - 1 to 0 - 127 to accommodate the motor controller values"""
    if value >= 0:
        if 64 + abs(round(value * 64)) > 127:
            return 127
        return (64 + abs(round(value * 64)))
    else:
        return (64 - abs(round(value * 64)))


if __name__ == "__main__":
    # Thread to handle actions taken based on controller input
    controller_thread = threading.Thread(target=control_thread)
    controller_thread.start()

    create_node()

    

