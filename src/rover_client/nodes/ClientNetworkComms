#!/usr/bin/python3

import rospy

from rover_main.msg import controllerMap
from std_msgs.msg import Float32

from rover_client.srv import ControlService

def send_controls():
    """Publish the collected controls to the network topic"""

    # Create the node to handle client side communications
    rospy.init_node("client_network_comms", anonymous=True)

    # Create the rover control stream topic
    control_stream = rospy.Publisher("rover_control_stream",
                                     data_class=controllerMap,
                                     queue_size=1)

    # Rate at which to update the control streams
    control_update_rate = rospy.Rate(250)

    # Wait for the controller service to be ready
    rospy.wait_for_service("controller_service")

    controller_serivce = rospy.ServiceProxy("controller_service", service_class=ControlService)

    # Publish data to the topic
    while not rospy.is_shutdown():
        control_stream.publish(controller_serivce().controllerState)

        # Sleep to keep in line with the update rate
        control_update_rate.sleep()

if __name__ == "__main__":
    try:
        send_controls()
    except rospy.ROSInterruptException:
        pass                    