#!/usr/bin/python3

import rospy

from rover_client.srv import ControlService
from rover_main.msg import controllerMap

def forward_service():

    # Create a new ros node
    rospy.init_node("controller_service_passthrough")

    # Block until the service is ready to communicate with
    rospy.wait_for_service("controller_service")

    # Create the proxy service to interact with the service
    controller_service = rospy.ServiceProxy("controller_service", service_class=ControlService, persistent=True)

    # Create the topic to forward the service to
    controller_publisher = rospy.Publisher("rover_control_stream", data_class=controllerMap, queue_size=1000)

    # Set the topic update rate
    update_rate = rospy.Rate(250)

    # While ROS is still running continue to upload controller states
    while not rospy.is_shutdown():
        try:
            controller_publisher.publish(controller_service().controllerState)
        except rospy.ServiceException as e:
            rospy.loginfo("Exception Thrown by Service: %s"%e)

        update_rate.sleep()

if __name__ == "__main__":
    forward_service()